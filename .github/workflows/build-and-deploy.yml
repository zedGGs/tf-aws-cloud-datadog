name: Docker build and Terraform deployment

on:
  push:
    branches:
      - main

jobs:
  delete-pre-existing-ami:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Remove pre-existing AMI if applicable
        run: |
          chmod +x ./shell/delete_monitored_ami.sh
          ./shell/delete_monitored_ami.sh
    

  packer-build:
    runs-on: ubuntu-latest
    needs: delete-pre-existing-ami

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Packer
        uses: hashicorp/setup-packer@main

      - name: Run 'packer init'
        run: "packer init ./packer/monitored-ami.pkr.hcl"

      - name: Run 'packer validate'
        run: "packer validate ./packer/monitored-ami.pkr.hcl"

      - name: Run 'packer build'
        run: "packer build ./packer/monitored-ami.pkr.hcl"

  terraform-deployment:
    runs-on: ubuntu-latest
    needs: packer-build

    env:

      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
      TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}

      TF_VAR_grafana_endpoint: ${{ secrets.GRAFANA_ENDPOINT }}
      TF_VAR_grafana_user: ${{ secrets.GRAFANA_USER }}
      TF_VAR_grafana_password: ${{ secrets.GRAFANA_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Deploy
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve